---
- name: Grab mysql credentials.
  ansible.builtin.fetch:
    src: "{{ database.credentials_file }}"
    dest: "{{ _ce_deploy_build_dir }}/mysql_backup_credentials.ini"
    flat: true

# Credentials for "managing" databases.
- ansible.builtin.set_fact:
    _mysql_host: "{{ lookup('ini', 'host section=client file={{ _ce_deploy_build_dir }}/mysql_backup_credentials.ini') }}"
- ansible.builtin.set_fact:
    _mysql_user: "{{ lookup('ini', 'user section=client file={{ _ce_deploy_build_dir }}/mysql_backup_credentials.ini') }}"
- ansible.builtin.set_fact:
    _mysql_password: "{{ lookup('ini', 'password section=client file={{ _ce_deploy_build_dir }}/mysql_backup_credentials.ini') }}"
# Credentials for the app itself.
# Manual: reuse given creds. Note the user gets ignored.
- ansible.builtin.set_fact:
    _mysql_build_user_name: "{{ _mysql_user }}"
  when: mysql_backup.credentials_handling == 'manual'
- ansible.builtin.set_fact:
    _mysql_build_password: "{{ _mysql_password }}"
  when: mysql_backup.credentials_handling == 'manual'
# Static: create/update user/pwd only once.
- ansible.builtin.set_fact:
    _mysql_build_user_name: "{{ database.user }}"
  when: mysql_backup.credentials_handling == 'static'

### Start of legacy handling. Can remove in a few months.
- name: Catch legacy static password handling.
  ansible.builtin.stat:
    path: "{{ _ce_deploy_data_dir }}/{{ inventory_hostname }}/mysql/{{ _mysql_host }}/{{ database.database }}"
  register: _legacy_static_creds
  delegate_to: localhost
  run_once: true
  when: mysql_backup.credentials_handling == 'static'

- name: Create new static password location if it doesn't exist.
  ansible.builtin.file:
    path: "{{ _ce_deploy_data_dir }}/{{ project_name }}_{{ build_type }}/mysql/{{ _mysql_host }}"
    state: directory
    owner: "{{ deploy_user }}"
    group: "{{ deploy_user }}"
    mode: 0755
  delegate_to: localhost
  run_once: true
  when: mysql_backup.credentials_handling == 'static'

- name: Copy legacy static password to new location.
  ansible.builtin.copy:
    src: "{{ _ce_deploy_data_dir }}/{{ inventory_hostname }}/mysql/{{ _mysql_host }}/{{ database.database }}"
    dest: "{{ _ce_deploy_data_dir }}/{{ project_name }}_{{ build_type }}/mysql/{{ _mysql_host }}/{{ database.database }}"
    owner: "{{ deploy_user }}"
    group: "{{ deploy_user }}"
    mode: 0644
  delegate_to: localhost
  run_once: true
  when:
    - mysql_backup.credentials_handling == 'static'
    - _legacy_static_creds is defined
    - _legacy_static_creds.stat.exists

- name: Delete legacy static password file if it exists.
  ansible.builtin.file:
    path: "{{ _ce_deploy_data_dir }}/{{ inventory_hostname }}/mysql/{{ _mysql_host }}/{{ database.database }}"
    state: absent
  delegate_to: localhost
  run_once: true
  when:
    - mysql_backup.credentials_handling == 'static'
    - _legacy_static_creds is defined
    - _legacy_static_creds.stat.exists
### End of legacy handling.

- ansible.builtin.set_fact:
    _mysql_build_password: "{{ lookup('password', '{{ _ce_deploy_data_dir }}/{{ project_name }}_{{ build_type }}/mysql/{{ _mysql_host }}/{{ database.database }}') }}"
  when: mysql_backup.credentials_handling == 'static'
# Rotate: create user/pwd on each build.
- ansible.builtin.set_fact:
    _mysql_build_user_name: "{{ database.user }}_{{ build_number }}"
  when: mysql_backup.credentials_handling == 'rotate'
- ansible.builtin.set_fact:
    _mysql_build_password: "{{ lookup('password', '/dev/shm/{{ project_name }}_{{ build_type }}_{{ build_number }}') }}"
  when: mysql_backup.credentials_handling == 'rotate'

- name: Set database handling type.
  ansible.builtin.set_fact:
    _mysql_handling: "{{ mysql_backup.handling }}"
# If we have a specific instruction for handling this database differently, use it.
- name: Override database handling type for this database, if specified.
  ansible.builtin.set_fact:
    _mysql_handling: "{{ mysql_backup.database.handling }}"
  when:
    - mysql_backup.database.handling is defined
    - mysql_backup.database.handling | length > 0
- name: Execute backup tasks.
  ansible.builtin.include_tasks: "deploy-{{ _mysql_handling }}.yml"

# We append privileges instead of replacing,
# to allow this role to be looped over,
# for multisites or projects with multiple databases.
# @see https://www.thesysadmin.rocks/2020/10/08/rds-mariadb-grant-all-permission-access-denied-for-user/ for why we cannot GRANT ALL.
# As of MySQL 8.0 the GRANT operation has no password option, you must CREATE your user first.
- name: Create/update mysql user for TCP connections.
  ansible.builtin.command: mysql --defaults-extra-file={{ database.credentials_file }} -e "CREATE USER IF NOT EXISTS '{{ _mysql_build_user_name }}'@'%' IDENTIFIED BY '{{ _mysql_build_password }}'; GRANT SELECT, INSERT, UPDATE, DELETE, CREATE, DROP, REFERENCES, INDEX, ALTER, CREATE TEMPORARY TABLES, LOCK TABLES, EXECUTE, CREATE VIEW, SHOW VIEW, CREATE ROUTINE, ALTER ROUTINE, EVENT, TRIGGER ON `{{ _mysql_build_database_name }}`.* TO '{{ _mysql_build_user_name }}'@'%';"
  when: ( mysql_backup.credentials_handling == 'rotate' ) or ( mysql_backup.credentials_handling == 'static' )
  run_once: true

- name: Create/update mysql user for unix socket connections.
  ansible.builtin.command: mysql --defaults-extra-file={{ database.credentials_file }} -e "CREATE USER IF NOT EXISTS '{{ _mysql_build_user_name }}'@'localhost' IDENTIFIED BY '{{ _mysql_build_password }}'; GRANT SELECT, INSERT, UPDATE, DELETE, CREATE, DROP, REFERENCES, INDEX, ALTER, CREATE TEMPORARY TABLES, LOCK TABLES, EXECUTE, CREATE VIEW, SHOW VIEW, CREATE ROUTINE, ALTER ROUTINE, EVENT, TRIGGER ON `{{ _mysql_build_database_name }}`.* TO '{{ _mysql_build_user_name }}'@'localhost';"
  when: ( mysql_backup.credentials_handling == 'rotate' ) or ( mysql_backup.credentials_handling == 'static' )
  run_once: true

- ansible.builtin.set_fact:
    _build_database:
      original: "{{ database }}"
      name: "{{ _mysql_build_database_name }}"
      user: "{{ _mysql_build_user_name }}"
      password: "{{ _mysql_build_password }}"
      host: "{{ _mysql_host }}"

- ansible.builtin.set_fact:
    build_databases: "{{ build_databases + [ _build_database ] }}"
