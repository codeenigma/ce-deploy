---
# Setup database names.
- ansible.builtin.set_fact:
    _mysql_build_database_name: "{{ database.database }}_{{ build_number }}"
- ansible.builtin.set_fact:
    _mysql_previous_build_database_name: "{{ database.database }}_{{ previous_build_number }}"
  # Note: we don't use the mysql_db Ansible module on purpose.
  # If database already exists, we want to fail and not override it
  # with previous build.
  # @TODO fix this so we check if the database exists and exit with
  # the proper plugin instead of using command.
- name: Create new database.
  ansible.builtin.command: mysql --defaults-extra-file={{ database.credentials_file }} -e "CREATE DATABASE \`{{ _mysql_build_database_name }}\`;"
  run_once: true

#- name: Create a new database.
#  community.mysql.mysql_db:
#    name: "{{ _mysql_build_database_name }}"
#    state: present
#    config_file: "{{ database.credentials_file }}"
#    config_overrides_defaults: true
#  run_once: true

- name: Populate new database.
  ansible.builtin.shell: "mysqldump --defaults-extra-file={{ database.credentials_file }} {{ mysql_backup.mysqldump_params }} {{ _mysql_previous_build_database_name }} | mysql --defaults-extra-file={{ database.credentials_file }} {{ _mysql_build_database_name }}"
  when: previous_build_number > 0
  run_once: true
